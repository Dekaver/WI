making python integers iterable codementorfind developers mentorsweb developmentangularasp netdjangoexpresshtml cssjquerylaravelnode jsrailsreactreduxvue jsmobile app developmentandroidiosionickotlinreact nativeswiftxcodeprogramming languagesc c cgolangjavajavascriptphppythonrrubytypescriptdata science engineeringaimachine learningmatlabtableautensorflowdatabase operationsawsdatabasedockergcpherokulinuxmongodbmysqlpostgressqlothersarduinobashelectronfirebasegamegitrasberry piselenium webdriverstripeunity dvisual studiowordpresslearning centerblogget insights scaling management product development founders engineering managers community postsread programming tutorials share knowledge become better developers together hot topicsandroidangulariosjavascriptnode jspythonreactblockchainethereumwrite postsign uplog infind developers mentorscommunity postblogsign uplog inarpit bhayanifollowbackend unacademy data amazon platform practo writes language internals math computer sciencemaking python integers iterablepublished jun last updated dec iterables python objects containers could stepped one item time usually using loop objects iterated example cannot iterate integer singular value best iterate range integers using range type helps us iterate integers range n since integers individualistically iterable try x raises exception stating typeerror int object iterable change python source code make integers iterable say every time x instead raising exception actually iterates values essay would going exactly entire agenda python iterable iterator protocol changing python source code make integers iterable might bad idea python iterables object could iterated iterable python list popular iterable finds usage almost every single python application directly indirectly even first user command executed python interpreter booting already created lists internal usage example see list iterated using loop element accessed via variable x x print x end similar list range python type allows us iterate integer values starting value start going till end stepping step values time range commonly used implementing c like loop python example loop iterates range starts goes till step producing sequence range iterate values every time increment current value e step x range print x end apart list range iterables tuple set frozenset str bytes bytearray memoryview dict python also allows us create custom iterables making objects types follow iterator protocol iterators iterator protocol python keeping things simple defines iterable object follows iterator protocol means object container implements following functions __iter__ return iterator object implemented __next__ method __next__ return next item iteration items exhausted raise stopiteration exception gist __iter__ something makes python object iterable hence make integers iterable need __iter__ function set integers iterable cpython famous widely used implementation python cpython core implemented pure c since need make changes one core datatypes python modifying cpython add __iter__ function integer type rebuild binary jumping implementation important understand fundamentals pytypeobject every object python associated type type instance struct named pytypeobject new instance structure effectively new type python structure holds meta information bunch c function pointers implementing small segment type functionality slots structure optional could filled putting appropriate function pointers driving corresponding functionality tp_iter slot among slots available slot interests us tp_iter slot hold pointer function returns iterator object slot corresponds __iter__ function effectively makes object iterable non null value slot indicates iterability tp_iter holds function following signature pyobject tp_iter pyobject integers python fixed size rather size integer depends value holds python implements super long integers story core implementation found longobject c instance pytypeobject defines integer long type pylong_type tp_iter slot set e null asserts fact integers python iterable pytypeobject pylong_type int tp_name offsetof pylongobject ob_digit tp_basicsize sizeof digit tp_itemsize tp_iter null value tp_iter makes int object iterable hence slot occupied appropriate function pointer aforementioned signature could well make integer iterable implementing long_iter implement tp_iter function integer type naming long_iter returns iterator object required convention core functionality looking implement integer n iterated iterate sequence n step behavior close pre defined range type iterates range integer values specifically range starts goes till n step define utility function rangeobject c given python integer returns instance longrangeiterobject per specifications utility function instantiate longrangeiterobject start ending long value given argument step utility function illustrated pylongrangeiter_zeroton creates returns range iterator long iterating values range n function creates returns range iterator till provided long value pyobject pylongrangeiter_zeroton pyobject long_obj creating new instance longrangeiterobject longrangeiterobject pyobject_new longrangeiterobject pylongrangeiter_type unable allocate memoty return null null return null set start start _pylong_zero set step step _pylong_one set index since want always start first element iteration index _pylong_zero set total length iteration equal provided value len long_obj increment reference count values referenced py_incref start py_incref step py_incref len py_incref index downcast iterator instance pyobject return return pyobject utility function pylongrangeiter_zeroton defined rangeobject c declared rangeobject h used across cpython declaration function rangeobject h using standard python macros goes like pyapi_func pyobject pylongrangeiter_zeroton pyobject function occupying tp_iter slot receive self object input argument expected return iterator instance hence long_iter function receive python integer object self iterated input argument return iterator instance would use utility function pylongrangeiter_zeroton defined returning us instance range iterator entire long_iter function could defined long_iter creates instance range iterator using pylongrangeiter_zeroton returns iterator instance argument tp_iter self object since trying iterate integer input argument long_iter pyobject type pylong_type holding integer value static pyobject long_iter pyobject long_obj return pylongrangeiter_zeroton long_obj long_iter defined place function tp_iter slot pylong_type enables required iterability integers pytypeobject pylong_type int tp_name offsetof pylongobject ob_digit tp_basicsize sizeof digit tp_itemsize long_iter tp_iter consolidated flow everything place entire flow goes like every time integer iterated using iteration method example would check tp_iter pylongtype since holds function pointer long_iter function invoked invocation return iterator object type longrangeiterobject fixed start index step values pythonic terms effectively range n hence x inherently evaluated x range allowing us iterate integers changes also hosted remote branch cpython long iter pull request holding diff found integer iteration action build new python binary aforementioned changes see iterable integers actions x instead raising exception actually iterates values print end since integers iterable create list using list internally list tries iterate given object e iteration defined get list iteration instead exception list good idea although seems fun somewhat useful iterable integers really great idea core reason makes unpacking unpredictable unpacking unpack iterable assign multiple variables example b assign b assigning b error one value right side multiple left unpacking treats right hand size iterable tries iterate since integers iterable right hand side post iteration yields values left hand side mere variables hence raises exception valueerror many values unpack expected things would work fine b right hand side post iteration two values left hand side two variables thus two similar statements result two different outcomes making unpacking unpredictable b traceback recent call last file line valueerror many values unpack expected b b conclusion essay modified python source code made integers iterable even though good idea fun play around code make changes favorite programming language helps us get detailed idea core python implementation may pave way us become python core developer one many articles python internals series python implements super long integers python caches integers references pytypeobject python type objects python iterator protocol cpython long_iter articles might like python caches integers python implements super long integers changed python made dubious python internals building finite state machines python coroutines personalize python prompt liked read consider subscribing weekly newsletter arpitbhayani newsletter week write essay programming languages internals deep dive super clever algorithm tips building highly scalable distributed systems always find browsing twitter arpit_bhayani cpythoninternalspythonreportenjoy post give arpit bhayani like helpful sharearpit bhayanibackend unacademy data amazon platform practo writes language internals math computer sciencei avid programmer passionate code design startups technology currently working amazon software development engineer amazon working healthcare startup named practo single followdiscover read posts arpit bhayaniget startedenjoy post leave like comment arpit first share opiniongithub flavored markdown supportedsubmitabdulhakeem abdulrahmana year agothis awesome way teaching language internals replyshow replies