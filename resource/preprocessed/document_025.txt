python make class json serializable stack overflow stack overflow products teams stack overflow public questions answers stack overflow teams developers technologists share private knowledge coworkers jobs programming related technical career opportunities talent recruit tech talent build employer brand advertising reach developers technologists worldwide company loading log sign current community stack overflow help chat meta stack overflow communities sign log customize list stack exchange communities company blog people code want input take survey join stack overflow learn share knowledge build career sign email sign sign google sign github sign facebook home public questions tags users find job jobs companies teams stack overflow teams collaborate share knowledge private group create free team teams teams create free team teams q work connect share knowledge within single location structured easy search learn make class json serializable ask question asked years months ago active days ago viewed k times make python class serializable simple class class fileitem def __init__ self fname self fname fname able get output import json my_file fileitem foo bar json dumps my_file typeerror object type fileitem json serializable without error python json serialization share improve question follow edited nov fraggamuffin gold badges silver badges bronze badges asked sep sergeysergey k gold badges silver badges bronze badges unfortunate answers seem answer question serialize class rather action question make class serializable answers assume serialization rather passing object along module serializes kyle delaney oct using python could use jsons convert object attributes recursively dict import jsons see answer works perfectly fine tswaehn apr kyledelaney really hoping interface magic method could implement become searializable guess implement to_dict function something called object passed module tries serialize felix b sep see stackoverflow com start jsonable mixin wolfgang fahl sep felixb use built vars function combination json dumps see answer stackoverflow com user nov add comment answers active oldest votes next idea expected output example f fileitem foo bar magic f fname foo bar case merely call json dumps f __dict__ want customized output subclass jsonencoder implement custom serialization trivial example see json import jsonencoder class myencoder jsonencoder def default self return __dict__ myencoder encode f fname foo bar pass class json dumps method cls kwarg json dumps cls myencoder also want decode supply custom object_hook jsondecoder class example def from_json json_object fname json_object return fileitem json_object fname f jsondecoder object_hook from_json decode fname foo bar f share improve answer follow edited jun mkrieger k gold badges silver badges bronze badges answered sep manoj govindanmanoj govindan k gold badges silver badges bronze badges using __dict__ work cases attributes set object instantiated __dict__ may fully populated example ok class attributes also want encode listed __dict__ unless modified class __init__ call way object instantiated kris hardy dec from_json function used object hook else return json_object statement deal general objects well jogojapan mar krishardy __dict__ also work use __slots__ new style class badp dec could use custom jsonencoder create custom protocol checking existence __json_serializable__ method calling obtain json serializable representation object would keeping python patterns like __getitem__ __str__ __eq__ __len__ jpmc jul __dict__ also work recursively e g attribute object another object neel apr show comments simple solution simple feature tojson method instead json serializable class implement serializer method import json class object def tojson self return json dumps self default lambda __dict__ sort_keys true indent call serialize object name onur age dog object dog name apollo print tojson output age dog name apollo name onur share improve answer follow edited may answered mar onur yıldırımonur yıldırım k gold badges silver badges bronze badges limited dict foo bar baz bat serialize json easily instead foo bar baz myobject cannot ideal situation would nested objects serialized json recursively explicitly mark e haase aug still work missing __dict___ try example class myobject def __init__ self self prop j json dumps foo bar baz myobject default lambda __dict__ onur yıldırım aug solution reversible e easy reconstruct object json jorge leitao apr j c leitão could two different classes fields objects b class probably properties would __dict__ b __dict__ martin thoma jun work datetime datetime instances throws following error datetime datetime object attribute __dict__ bruno finger jun show comments complex classes could consider tool jsonpickle jsonpickle python library serialization deserialization complex python objects json standard python libraries encoding python json stdlib json simplejson demjson handle python primitives direct json equivalent e g dicts lists strings ints etc jsonpickle builds top libraries allows complex data structures serialized json jsonpickle highly configurable extendable allowing user choose json backend add additional backends link jsonpickle pypi share improve answer follow edited apr mrnom silver badge bronze badges answered dec geccogecco k gold badges silver badges bronze badges coming c expecting simple one liner messing classes jerther dec jsonpickle awesome worked perfectly huge complex messy object many levels classes wisbucky mar example proper way save file documentation shows encode decode jsonpickle object also able decode dict dicts containing pandas dataframes user aug user use obj jsonpickle decode file read file write jsonpickle encode obj kilian batzner jan question specifically django use jsonpickle serializing session data vulnerability pickle described docs djangoproject com en topics http sessions paul bormans jun show comments answers involve changing call json dumps always possible desirable may happen inside framework component example want able call json dumps obj simple solution inheriting dict class fileitem dict def __init__ self fname dict __init__ self fname fname f fileitem tasks txt json dumps f need change anything works class basic data representation trickier things always set keys explicitly share improve answer follow answered jul andyhasitandyhasit k gold badges silver badges bronze badges really nice solution believe case benefits communicate shape object making class init inherently serializable looks interpretable repr pascalvkooten sep though dot access still missing pascalvkooten sep ahh seems work thanks sure accepted answer totally agree changing dumps good solution way cases probably want dict inheritance together delegation means dict type attribute inside class pass attribute parameter initialisation something like super __init__ self elements cglacet aug use case needed store data invisible json dumps used method class dictwithrider takes arbitrary object stores member makes accessible via function get_rider_obj pass dict __init__ parts application want see hidden data call get_rider_obj json dumps sees basically empty dict pascalvkooten mentioned access regular members dot notation access functions gkimsey jul simple use ideal dot notation easily enabled additional lines subsequent dict __init__ line self fname fname object deserialised f fileitem json loads serialised_f paddyg jan show comment like onur answer would expand include optional tojson method objects serialize def dumper obj try return obj tojson except return obj __dict__ print json dumps some_big_object default dumper indent share improve answer follow edited may community silver badge answered jan jason sjason k gold badges silver badges bronze badges found best balance using existing json dumps introducing custom handling thanks daniel buckmaster apr actually really like rather try catch would probably something like tojson obj __attrs__ avoid silent failure event failure tojson reason failure potentially leads data corruption thclark nov thclark understand idomatic python asks forgiveness permission try except right approach correct exception caught attributeerror case phil sep phil years older wiser agree thclark sep really catching attributeerror explicitly juanpa arrivillaga feb show comment add to_json method class like def to_json self return self message want serialized add code answer somewhere top everything json import jsonencoder def _default self obj return getattr obj __class__ to_json _default default obj _default default jsonencoder default jsonencoder default _default monkey patch json module imported jsonencoder default automatically checks special to_json method uses encode object found like onur said time update every json dumps project share improve answer follow edited apr samuel liew k gold badges silver badges bronze badges answered aug fancy johnfancy john k gold badges silver badges bronze badges big thanks answer allows want able serialize object without changing existing code methods mostly work object defined third party library serialization code third party changing awkward method need theobject to_json my_serializer yongwei wu oct add comment another option wrap json dumping class import json class fileitem def __init__ self fname self fname fname def __repr__ self return json dumps self __dict__ even better subclassing fileitem class jsonserializable class import json class jsonserializable object def tojson self return json dumps self __dict__ def __repr__ self return self tojson class fileitem jsonserializable def __init__ self fname self fname fname testing f fileitem foo bar f tojson fname foo bar f fname foo bar str f string coercion fname foo bar share improve answer follow edited dec answered jun paulo freitaspaulo freitas k gold badges silver badges bronze badges hi really like custom encoder approach would better u make class json seriazable try try try nothing idea thing json module test class built python types even says custom classes make encoder faked could something class behave like simple list json module try subclasscheck instancecheck nothing bojan radojevic aug adrenalin could inherit primary type probably dict class attribute values serializable mind hacks could also use jsonpickle json_tricks something instead standard one still custom encoder one need write call former pickles instance latter stores dict attributes change implementing __json__encode__ __json_decode__ disclosure made last one mark oct make object serializeable json class provides method get json string returned trivial thus json dumps f fail asked omni sep add comment using python could use jsons convert object attributes recursively dict import jsons a_dict jsons dump your_object wanted string a_str jsons dumps your_object class implemented jsons jsonserializable a_dict your_object json share improve answer follow answered dec r hr h gold badge silver badges bronze badges able use python found cleanest solution convert python classes dicts json strings viceversa mix jsons library dataclasses far good ruluk feb external library built standard python install noumenon jul class slots attribute yehudahs dec need use slots dumping according signature specific class need slots upcoming version also longer case r h dec add comment came across problem day implemented general version encoder python objects handle nested objects inherited fields import json import inspect class objectencoder json jsonencoder def default self obj hasattr obj to_json return self default obj to_json elif hasattr obj __dict__ dict key value key value inspect getmembers obj key startswith __ inspect isabstract value inspect isbuiltin value inspect isfunction value inspect isgenerator value inspect isgeneratorfunction value inspect ismethod value inspect ismethoddescriptor value inspect isroutine value return self default return obj example class c object c def to_json self return c yes class b object b b def __init__ self self def f self print f class b def __init__ self self b ab b self c c print json dumps cls objectencoder indent sort_keys true result b ab b b c c yes share improve answer follow edited may np_ silver badges bronze badges answered feb tobiguetobigue gold badges silver badges bronze badges although bit old facing circular imports error instead return obj last line return super objectencoder self default obj reference sometypefoo apr add comment mentioned many answers pass function json dumps convert objects one types supported default supported type surprisingly none mentions simplest case use built function vars convert objects dict containing attributes json dumps obj default vars note covers basic cases need specific serialization certain types e g exluding certain attributes objects __dict__ attribute need use custom function jsonencoder desribed answers share improve answer follow edited feb answered oct user user silver badges bronze badges unclear mean default vars mean vars default serializer really solve case influence json dumps called simply pass object library library calls json dumps object really help implemented vars library use dumps way sense equivalent custom jsonencoder felix b nov correct nothing else simple choice custom serializer solve case describe see correctly solution case control json dumps invoked user nov resolved case simply brilliant rub dec objects approach throw vars argument must __dict__ attribute justamartin feb add comment import simplejson class user object def __init__ self name mail self name name self mail mail def _asdict self return self __dict__ print simplejson dumps user alice alice mail com using standard json need define default function import json def default return _asdict print json dumps user alice alice mail com default default share improve answer follow edited may jtlz gold badges silver badges bronze badges answered jun tryer tryer silver badges bronze badges simplifed removing _asdict function lambda json dumps user alice alice mail com default lambda x x __dict__ justengland nov add comment json limited terms objects print jsonpickle may need pip install jsonpickle limited terms indent text would like inspect contents object whose class change still find straighter way import json import jsonpickle print json dumps json loads jsonpickle encode object indent note still print object methods share improve answer follow edited jul martlark k gold badges silver badges bronze badges answered apr ribamarribamar silver badges bronze badges add comment class trick converts object standard json import json class serializer object staticmethod def serialize object return json dumps object default lambda __dict__ values usage serializer serialize my_object working python python share improve answer follow answered oct lost koderlost koder silver badges bronze badges liked method ran issues trying serialize complex objects whos members methods serializable implementation works objects class serializer object staticmethod def serialize obj def check k v __dict__ items try _ json dumps v __dict__ k v except typeerror __dict__ k str v return return json dumps check obj __dict__ indent charlton nov add comment import json class foo object def __init__ self self bar baz self _qux flub def somemethod self pass def default instance return k v k v vars instance items str k startswith _ json_foo json dumps foo default default assert bar baz json_foo print json_foo share improve answer follow answered jul rectangletanglerectangletangle k gold badges silver badges bronze badges doc parameter default obj function return serializable version obj raise typeerror default default simply raises typeerror luckydonald jun add comment jaraco gave pretty neat answer needed fix minor things works code custom class class mycustom object def __json__ self return self b self b __python__ mymodule submodule mycustom from_json to_json __json__ supported simplejson classmethod def from_json cls json obj cls obj json obj b json b return obj dumping loading import simplejson obj mycustom obj obj b json simplejson dumps obj for_json true two step loading obj _dict simplejson loads json obj mycustom from_json obj _dict make sure correct thing assert isinstance obj mycustom assert obj __dict__ obj __dict__ note need two steps loading __python__ property used common using method aljohri check popularity approaches serialization python json to_json tojson __json__ for_json deserialization json python from_json share improve answer follow edited jul answered jun martin thomamartin thoma k gold badges silver badges bronze badges add comment worked well class jsonserializable object def serialize self return json dumps self __dict__ def __repr__ self return self serialize staticmethod def dumper obj serialize dir obj return obj serialize return obj __dict__ class fileitem jsonserializable log debug json dumps default jsonserializable dumper indent share improve answer follow answered jan jmhostaletjmhostalet gold badges silver badges bronze badges add comment cents demonstrates explicit json serialization tree like python object note actually wanted code like could use twisted filepath class import json sys os class file def __init__ self path self path path def isdir self return os path isdir self path def isfile self return os path isfile self path def children self return file os path join self path f f os listdir self path def getsize self return os path getsize self path def getmodificationtime self return os path getmtime self path def _default path path isfile isfile isdir isdir mtime int getmodificationtime size getsize isfile else isdir children children return folder os path abspath json dump file folder sys stdout default _default share improve answer follow answered jul dan broughdan brough silver badges bronze badges add comment mind installing package use json tricks pip install json tricks need import dump json_tricks instead json usually work json_tricks import dumps json_str dumps cls_instance indent give __instance_type__ module_name test_class mytestcls attributes attr val dct_attr hello basically work great general exceptions e g special things happen __new__ metaclass magic going obviously loading also works otherwise point json_tricks import loads json_str loads json_str assume module_name test_class mytestcls imported changed non compatible ways get back instance dictionary something identical copy one dumped want customize something gets de serialized add special methods class like class customencodecls def __init__ self self relevant self irrelevant def __json_encode__ self return primitive serializable types like dict list int string float return relevant self relevant def __json_decode__ self attrs initialize properties note __init__ called implicitly self relevant attrs relevant self irrelevant serializes part attributes parameters example free bonus get de serialization numpy arrays date times ordered maps well ability include comments json disclaimer created json_tricks problem share improve answer follow answered nov markmark k gold badges silver badges bronze badges tested json_tricks worked beautify pauljohn nov add comment kyle delaney comment correct tried use answer https stackoverflow com well improved version https stackoverflow com create jsonable mixin make class json serializeable use jsonable super class either call instance tojson instance asjson two offered methods could also extend jsonable class approaches offered test example unit test family person sample results tojson members flintstone fred firstname fred lastname flintstone flintstone wilma firstname wilma lastname flintstone name flintstones asjson name flintstones members flintstone fred firstname fred lastname flintstone flintstone wilma firstname wilma lastname flintstone unit test family person sample def testjsonable self family family flintstones family add person fred flintstone family add person wilma flintstone json family tojson json family asjson print json print json class family jsonable def __init__ self name self name name self members def add self person self members person lastname person firstname person class person jsonable def __init__ self firstname lastname self firstname firstname self lastname lastname jsonable py defining jsonable mixin created author wf import json class jsonable object mixin allow classes json serializable see https stackoverflow com questions make class json serializable def __init__ self constructor def tojson self return json dumps self default lambda __dict__ sort_keys true indent def getvalue self v hasattr v asjson return v asjson elif type v dict return self reprdict v elif type v list vlist vitem v vlist append self getvalue vitem return vlist else return v def reprdict self srcdict get dict elements dict v srcdict items self getvalue v return def asjson self recursively return dict elements return self reprdict self __dict__ find approaches integrated https github com wolfgangfahl pylodstorage project available https pypi org project pylodstorage share improve answer follow edited oct answered sep wolfgang fahlwolfgang fahl k gold badges silver badges bronze badges add comment jsonweb seems best solution see http www jsonweb info en latest jsonweb encode import to_object dumper to_object class datamodel object def __init__ self id value self id id self value value data datamodel foo dumper data __type__ datamodel id value foo share improve answer follow answered oct matthewlentmatthewlent silver badges bronze badges work well nested objects including decoding encoding simone zandara dec add comment class dobject json jsonencoder def delete_not_related_keys self _dict key skipkeys ensure_ascii check_circular allow_nan sort_keys indent try del _dict key except continue def default self hasattr __dict__ my_dict __dict__ copy self delete_not_related_keys my_dict return my_dict else return dobject name abdul wahid b dobject b name print json dumps b cls dobject share improve answer follow edited jun answered jun sheikh abdul wahidsheikh abdul wahid gold badge silver badges bronze badges add comment building quinten cabo answer def sterilize obj make object ameniable dumping json type obj str float int bool type none return obj elif isinstance obj dict return k sterilize v k v obj items list_ret dict_ret dir obj __iter__ callable obj __iter__ list_ret extend sterilize v v obj elif __dict__ dict_ret update k sterilize v k v obj __dict__ items k __module__ __dict__ __weakref__ __doc__ elif __doc__ __module__ aval getattr obj type aval str float int bool type none dict_ret aval elif __class__ __objclass__ isinstance aval type dict_ret sterilize aval len list_ret len dict_ret return repr obj return dict_ret else len dict_ret return list_ret return list_ret dict_ret differences works iterable instead list tuple works numpy arrays etc works dynamic types ones contain __dict__ includes native types float none get converted string classes __dict__ members mostly work __dict__ member names collide get one likely member classes lists members look like tuple list dictionary python isinstance call may thing needs changing share improve answer follow edited jul answered may mheymanmheyman silver badges bronze badges add comment ran problem tried store peewee model postgresql jsonfield struggling general solution key solution going python source code realizing code documentation described already explains extend existing json dumps support data types suppose current model contains fields serializable json model contains json field originally looks like class someclass model json_field jsonfield define custom jsonencoder like class customjsonencoder json jsonencoder def default self obj isinstance obj sometypeunsupportedbyjsondumps return return json jsonencoder default self obj staticmethod def json_dumper obj return json dumps obj cls customjsonencoder use jsonfield like class someclass model json_field jsonfield dumps customjsonencoder json_dumper key default self obj method every single json serializable complaint receive python add code handle unserializable json type enum datetime example support class inheriting enum class transactiontype enum current stacked def default self obj isinstance obj transactiontype return obj value return json jsonencoder default self obj finally code implemented like convert peewee models json seriazable object like peewee_model whateverpeeweemodel new_model someclass new_model json_field model_to_dict peewee_model though code somewhat specific peewee think applicable orms django etc general also understood json dumps works solution also works python sans orm general questions please post comments section thanks share improve answer follow answered jul sivabudhsivabudh k gold badges silver badges bronze badges add comment first need make object json compliant dump using standard json module way def serialize isinstance dict return k serialize v k v items isinstance list return serialize e e isinstance bytes return decode utf return share improve answer follow answered feb adi deganiadi degani silver badges bronze badges add comment function uses recursion iterate every part dictionary calls repr methods classes build types def sterilize obj object_type type obj isinstance obj dict return k sterilize v k v obj items elif object_type list tuple return sterilize v v obj elif object_type str int bool float return obj else return obj __repr__ share improve answer follow edited nov answered mar quinten caboquinten cabo bronze badges add comment came solution use method pass document dict list objectid etc serialize def getserializable doc check list isinstance doc list val enumerate doc doc getserializable doc return doc check dict isinstance doc dict key doc keys doc key getserializable doc key return doc process objectid isinstance doc objectid doc str doc return doc use custom serializting stuff rest stuff return doc share improve answer follow answered may dewsworlddewsworld k gold badges silver badges bronze badges add comment liked lost koder method ran issues trying serialize complex objects whos members methods serializable implementation works objects class serializer object staticmethod def serialize obj def check k v __dict__ items try _ json dumps v __dict__ k v except typeerror __dict__ k str v return return json dumps check obj __dict__ indent share improve answer follow answered nov charltonwill charlton silver badges bronze badges add comment able install package recommend trying dill worked fine project nice thing package interface pickle already using pickle project simply substitute dill see script runs without changing code cheap solution try full anti disclosure way affiliated never contributed dill project install package pip install dill edit code import dill instead pickle import pickle import dill pickle run script see works may want clean code longer shadowing pickle module name specifics datatypes dill cannot serialize project page dill pickle following standard types none type bool int long float complex str unicode tuple list dict file buffer builtin old new style classes instances old new style classes set frozenset array functions exceptions dill also pickle exotic standard types functions yields nested functions lambdas cell method unboundmethod module code methodwrapper dictproxy methoddescriptor getsetdescriptor memberdescriptor wrapperdescriptor xrange slice notimplemented ellipsis quit dill cannot yet pickle standard types frame generator traceback share improve answer follow answered dec thedavidmothedavidmo add comment see mention serial versioning backcompat post solution using bit probably lot learn specifically java javascript probably mature goes https gist github com andy b c ed fd fe share improve answer follow answered aug fletch f fletchfletch f fletch silver badges bronze badges add comment add another option use attrs package asdict method class objectencoder jsonencoder def default self return attr asdict json dumps objects cls objectencoder convert back def from_json _obj_name type_ _obj_name del _obj_name return globals type_ else return data jsondecoder object_hook from_json decode data class looks like attr class foo object x attr ib _obj_name attr ib init false default foo share improve answer follow answered oct machinekodermachinekoder silver badge bronze badges add comment next highly active question earn reputation order answer question reputation requirement helps protect question spam non answer activity answer looking browse questions tagged python json serialization ask question overflow blog podcast blocking haters service developer survey open featured meta testing three vote close reopen network sites future community promotion open source hot network questions ads rule proposal one delete undelete per post take developer survey visit chat linked flask store object directly session turn python object json output python flask convert dictionary object json serialize complex objects json flask class json serializable object json serializable python serialize class json make json object serializable use class object json python serialize object contains list objects see linked questions related merge two dictionaries single expression taking union dictionaries check whether file exists without exceptions comments used json pretty print json shell script correct json content type make function decorators chain together make flat list list lists google prepend json responses pretty print json using javascript post json data curl hot network questions use score highest sentence token burn point time future ants trees ok bad name superman enemy valid esta got refused b b us visa ya fantasy golden spots eyes much oil necessary fry cook eggs important brand name type string overall sound guitar jovanka houska introduced wgm holds prestigious im title c b bad white local network loses internet certain device connects ti display interference eigenvalue pattern purpose oiling wooden chopping board good fire resistant material write anyone recognize identity location octagonal structure different pdf output source files primary school child writing music venezuela stock market crashed march th happened way limit players currency system resource system elementary proof distal maps invertible increasing k point grid take dos calculation nelson mandela directly compare accuse israel apartheid want potatoes baked within hour forgot preheat oven put preheating hot questions question feed subscribe rss question feed subscribe rss feed copy paste url rss reader lang py stack overflow questions jobs developer jobs directory salary calculator help mobile products teams talent advertising enterprise company press work legal privacy policy terms service contact us cookie settings cookie policy stack exchange network technology life arts culture recreation science stack overflow server fault super user web applications ask ubuntu webmasters game development tex latex software engineering unix linux ask different apple wordpress development geographic information systems electrical engineering android enthusiasts information security database administrators drupal answers sharepoint user experience mathematica salesforce expressionengine answers stack overflow em português blender network engineering cryptography code review magento software recommendations signal processing emacs raspberry pi stack overflow на русском code golf stack overflow en español ethereum data science arduino bitcoin software quality assurance testing sound design windows phone photography science fiction fantasy graphic design movies tv music practice theory worldbuilding video production seasoned advice cooking home improvement personal finance money academia law physical fitness gardening landscaping parenting english language usage skeptics mi yodeya judaism travel christianity english language learners japanese language chinese language french language german language biblical hermeneutics history spanish language islam русский язык russian language arqade gaming bicycles role playing games anime manga puzzling motor vehicle maintenance repair board card games bricks homebrewing martial arts great outdoors poker chess sports mathoverflow mathematics cross validated stats theoretical computer science physics chemistry biology computer science philosophy linguistics psychology neuroscience computational science meta stack exchange stack apps api data blog facebook twitter linkedin instagram site design logo stack exchange inc user contributions licensed cc sa rev stack overflow works best javascript enabled privacy clicking accept cookies agree stack exchange store cookies device disclose information accordance cookie policy accept cookies customize settings